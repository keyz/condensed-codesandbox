diff --git a/chapter-04-07-enter-to-submit/src/root.tsx b/chapter-04-08-pagination-take-2/src/root.tsx
--- a/chapter-04-07-enter-to-submit/src/root.tsx
+++ b/chapter-04-08-pagination-take-2/src/root.tsx
@@ -1,10 +1,13 @@
 import { Octokit } from "@octokit/rest";
 import * as React from "react";
 import useSWR from "swr";
+import { PaginationControl } from "./components/pagination";
 import { assertNonNull } from "./helpers/refinement";
 import { formatRelativeTime } from "./helpers/time";
 import type { TRepoSearchResultItem } from "./types";
 
+const PAGE_SIZE = 8;
+
 const octokit = new Octokit({
   auth: process.env.NEXT_PUBLIC_UNSAFE_LOCAL_ONLY_GITHUB_PERSONAL_ACCESS_TOKEN,
 });
@@ -46,8 +49,9 @@ export function GitHubRoot() {
   );
 }
 
-function useGitHubRepoSearchQuery(q: string) {
-  const cacheKey = ["octokit.search.repos", q];
+function useGitHubRepoSearchQuery(input: { q: string; pageNumber: number }) {
+  const { q, pageNumber } = input;
+  const cacheKey = ["octokit.search.repos", q, pageNumber];
 
   return useSWR(cacheKey, async () => {
     // https://docs.github.com/en/search-github/searching-on-github/searching-for-repositories
@@ -56,8 +60,8 @@ function useGitHubRepoSearchQuery(q: string) {
       q,
       sort: "stars",
       order: "desc",
-      per_page: 24,
-      page: 1,
+      per_page: PAGE_SIZE,
+      page: pageNumber,
     });
   });
 }
@@ -65,7 +69,12 @@ function useGitHubRepoSearchQuery(q: string) {
 export function SearchResult(props: { searchQ: string }) {
   const { searchQ } = props;
 
-  const query = useGitHubRepoSearchQuery(searchQ);
+  const [currentPageNumber, setCurrentPageNumber] = React.useState<number>(0);
+
+  const query = useGitHubRepoSearchQuery({
+    q: searchQ,
+    pageNumber: currentPageNumber + 1,
+  });
   const response = query.data;
 
   if (query.isLoading) {
@@ -82,12 +91,33 @@ export function SearchResult(props: { searchQ: string }) {
 
   const repoList = response.data.items;
 
+  const totalItemCount = response.data.total_count;
+  const totalPageCount = Math.ceil(totalItemCount / PAGE_SIZE);
+
+  const canGoBack = currentPageNumber * PAGE_SIZE > 0;
+  const canGoForward = (currentPageNumber + 1) * PAGE_SIZE < totalItemCount;
+
   return (
-    <div className="flex flex-col gap-6">
-      {repoList.map((item) => {
-        return <RepoItem key={item.id} data={item} />;
-      })}
-    </div>
+    <>
+      <div className="flex flex-col gap-6">
+        {repoList.map((item) => {
+          return <RepoItem key={item.id} data={item} />;
+        })}
+      </div>
+
+      <PaginationControl
+        canGoBack={canGoBack}
+        canGoForward={canGoForward}
+        currentPageNumber={currentPageNumber}
+        onNextClick={() => {
+          setCurrentPageNumber((n) => n + 1);
+        }}
+        onPrevClick={() => {
+          setCurrentPageNumber((n) => n - 1);
+        }}
+        totalPageCount={totalPageCount}
+      />
+    </>
   );
 }
 
